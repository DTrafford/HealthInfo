{"ast":null,"code":"/*!\n * JIC JavaScript Library v2.0.2\n * https://github.com/brunobar79/J-I-C/\n *\n * Copyright 2016, Bruno Barbieri\n * Dual licensed under the MIT or GPL Version 2 licenses.\n *\n * Date: Tue Jul 11 13:13:03 2016 -0400\n */\n\n/**\n * Create the jic object.\n * @constructor\n */\nvar jic = {\n  /**\n   * Receives an Image Object (can be JPG OR PNG) and returns a new Image Object compressed\n   * @param {Image} source_img_obj The source Image Object\n   * @param {Integer} quality The output quality of Image Object\n   * @param {String} output format. Possible values are jpg and png\n   * @return {Image} result_image_obj The compressed Image Object\n   */\n  compress: function compress(source_img_obj, quality, output_format) {\n    var mime_type = \"image/jpeg\";\n\n    if (typeof output_format !== \"undefined\" && output_format == \"png\") {\n      mime_type = \"image/png\";\n    }\n\n    var cvs = document.createElement('canvas');\n    cvs.width = source_img_obj.naturalWidth;\n    cvs.height = source_img_obj.naturalHeight;\n    var ctx = cvs.getContext(\"2d\").drawImage(source_img_obj, 0, 0);\n    var newImageData = cvs.toDataURL(mime_type, quality / 100);\n    var result_image_obj = new Image();\n    result_image_obj.src = newImageData;\n    return result_image_obj;\n  },\n\n  /**\n   * Receives an Image Object and upload it to the server via ajax\n   * @param {Image} compressed_img_obj The Compressed Image Object\n   * @param {String} The server side url to send the POST request\n   * @param {String} file_input_name The name of the input that the server will receive with the file\n   * @param {String} filename The name of the file that will be sent to the server\n   * @param {function} successCallback The callback to trigger when the upload is succesful.\n   * @param {function} (OPTIONAL) errorCallback The callback to trigger when the upload failed.\n  * @param {function} (OPTIONAL) duringCallback The callback called to be notified about the image's upload progress.\n  * @param {Object} (OPTIONAL) customHeaders An object representing key-value  properties to inject to the request header.\n   */\n  upload: function upload(compressed_img_obj, upload_url, file_input_name, filename, successCallback, errorCallback, duringCallback, customHeaders) {\n    //ADD sendAsBinary compatibilty to older browsers\n    if (XMLHttpRequest.prototype.sendAsBinary === undefined) {\n      XMLHttpRequest.prototype.sendAsBinary = function (string) {\n        var bytes = Array.prototype.map.call(string, function (c) {\n          return c.charCodeAt(0) & 0xff;\n        });\n        this.send(new Uint8Array(bytes).buffer);\n      };\n    }\n\n    var type = \"image/jpeg\";\n\n    if (filename.substr(-4).toLowerCase() == \".png\") {\n      type = \"image/png\";\n    }\n\n    var data = compressed_img_obj.src;\n    data = data.replace('data:' + type + ';base64,', '');\n    var xhr = new XMLHttpRequest();\n    xhr.open('POST', upload_url, true);\n    var boundary = 'someboundary';\n    xhr.setRequestHeader('Content-Type', 'multipart/form-data; boundary=' + boundary); // Set custom request headers if customHeaders parameter is provided\n\n    if (customHeaders && typeof customHeaders === \"object\") {\n      for (var headerKey in customHeaders) {\n        xhr.setRequestHeader(headerKey, customHeaders[headerKey]);\n      }\n    } // If a duringCallback function is set as a parameter, call that to notify about the upload progress\n\n\n    if (duringCallback && duringCallback instanceof Function) {\n      xhr.upload.onprogress = function (evt) {\n        if (evt.lengthComputable) {\n          duringCallback(evt.loaded / evt.total * 100);\n        }\n      };\n    }\n\n    xhr.sendAsBinary(['--' + boundary, 'Content-Disposition: form-data; name=\"' + file_input_name + '\"; filename=\"' + filename + '\"', 'Content-Type: ' + type, '', atob(data), '--' + boundary + '--'].join('\\r\\n'));\n\n    xhr.onreadystatechange = function () {\n      if (this.readyState == 4) {\n        if (this.status == 200) {\n          successCallback(this.responseText);\n        } else if (this.status >= 400) {\n          if (errorCallback && errorCallback instanceof Function) {\n            errorCallback(this.responseText);\n          }\n        }\n      }\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"script"}